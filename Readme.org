#+TITLE: Emacs configuration
#+STARTUP: overview

* Auto update packages

#+begin_src emacs-lisp
  (use-package auto-package-update :ensure t)
#+end_src

* Global keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-k") 'global-set-key)
#+end_src

** Files

#+begin_src emacs-lisp
  (global-set-key (kbd "H-s") 'save-buffer)
  (global-set-key (kbd "H-S") 'save-some-buffers)

  (global-set-key (kbd "H-f") 'fdx/visit-or-projectile-visit)
  (global-set-key (kbd "H-F") 'ido-find-file)

  (global-set-key (kbd "H-D f") 'fdx/delete-file-and-buffer)
  (global-set-key (kbd "H-D r") 'fdx/rename-current-file)
  (global-set-key (kbd "H-D m") 'fdx/chmod-current-file)
  (global-set-key (kbd "H-D t") 'fdx/touch-current-file)
#+end_src

** Lines

#+begin_src emacs-lisp
  (global-set-key (kbd "H--") 'kill-whole-line)

  (global-set-key (kbd "H-d") 'fdx/duplicate-line)

  (global-set-key (kbd "<H-S-up>") 'fdx/move-line-up)
  (global-set-key (kbd "<H-S-down>") 'fdx/move-line-down)
#+end_src

** Buffer

Auto revert buffers

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

Reload file with =<f5>=

#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+end_src

** Reloading config

#+begin_src emacs-lisp
  (defun fdx/reload-emacs-configuration ()
    "Reload emacs configuration"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/Readme.org")))

  (global-set-key (kbd "<H-f12>") 'fdx/reload-emacs-configuration)

  (global-set-key (kbd "S-<f12>") 'package-refresh-contents)
#+end_src

** Word and line wrap

#+begin_src emacs-lisp
  (setq-default toggle-truncate-lines t)
  (setq-default word-wrap t)
#+end_src

* Interface tweaks

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; (menu-bar-mode 1)

  (fset 'yes-or-no-p 'y-or-n-p)
  (blink-cursor-mode 0)

  (show-paren-mode)
#+end_src

* Appearance

** Doom

#+begin_src emacs-lisp
  (use-package doom-themes :ensure t)
#+end_src

** Load theme

#+begin_src emacs-lisp
  (load-theme 'doom-ir-black t)
#+end_src

** Default face

#+begin_src emacs-lisp
  (custom-set-faces
   `(default ((t (:family "Inconsolata"
                          ;; :foundry "unknown"
                          :slant normal
                          :weight normal
                          :height ,260
                          :width normal)))))
#+end_src

* Try

#+begin_src emacs-lisp
  (use-package try :ensure t)
#+end_src

* Which key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+end_src

* Backup files

Save backup files in it's own directory

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backup-files")))
#+end_src

Set backup by copying

#+begin_src emacs-lisp
  (setq backup-by-copying t)
#+end_src

Configure how much to backup

#+begin_src emacs-lisp
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+end_src

* Indentation

** Reindending whole buffer

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/reindent-buffer ()
    "Indent the current buffer."
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max))
    (untabify (point-min) (point-max)))
#+end_src

*** Global keybinding

#+begin_src emacs-lisp
  (global-set-key (kbd "H-=") 'fdx/reindent-buffer)
#+end_src

** Highlight current indent level

#+begin_src emacs-lisp
  (use-package indent-guide
    :ensure t
    :config
    (progn

      ))

  (require 'indent-guide)
#+end_src

** Highlight indentation level

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :init
    (progn
      (setq highlight-indent-guides-method 'fill)
      (setq highlight-indent-guides-auto-odd-face-perc 2)
      (setq highlight-indent-guides-auto-even-face-perc 5)
      ))

  (require 'highlight-indent-guides)
#+end_src

** Set default indentation level

#+begin_src emacs-lisp
  (setq         indent-tabs-mode nil) ; And force use of spaces
  (setq-default indent-tabs-mode nil)

  (setq c-basic-offset          2) ; indents 2 chars
  (setq tab-width               2) ; and 2 char wide for TAB

  (setq css-indent-offset       2) ; set CSS indentation to 2 spaces
  (setq js-indent-level         2) ; set JavaScript indentation to 2 spaces
  (setq coffee-tab-width        2) ; set CoffeeScript indentation to 2 spaces
  (setq typescript-indent-level 2) ; set TypeScript indentation to 2 spaces
#+end_src

** Align regex

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c i") 'align-regexp)
#+end_src

** Cleanup whitespace mode

#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode :ensure t)
#+end_src

* org-mode

** Blocks

*** Custom block templates

#+begin_src emacs-lisp
  (setq org-structure-template-alist
        '(
          ("-" . "src")
          ("q" . "quote")
          ("v" . "verse")
          ("r" . "src ruby")
          ("l" . "src emacs-lisp")
          ("s" . "src sh")
          ("C" . "comment")
          ("e" . "example")
          ("h" . "export html")
          ("a" . "export ascii")
          ("c" . "center")
          ("E" . "export")
          ))
#+end_src

** Clocking

#+begin_src emacs-lisp
  (setq org-clock-into-drawer "CLOCKING")

  (setq org-duration-format (quote h:mm))
#+end_src

** Org bullets

Pretty bullets for org-mode

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Populate org-mode shots

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/populate-org-shots (ARG)
    "Populate {{{shot(n)}}}* macros on current buffer"
    (interactive "p")
    (save-excursion
      (beginning-of-buffer)
      (kmacro-set-counter 1)
      (while (search-forward "{{{shot(" nil t)
        (kmacro-insert-counter ARG)
        (let ((start (point)))
          (search-forward-regexp "\\(,\.+)\\|)}}}\\)")
          (let ((end (match-beginning 0)))
            (delete-region start end)
            )
          ))))
#+end_src

*** Insert shot and populate

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/insert-and-populate-org-shots ()
    "Insert {{{shot()}}} and repopulate shots on buffer"
    (interactive)
    (insert "{{{shot()}}}")
    (fdx/populate-org-shots t))
#+end_src

*** Org Agenda

#+begin_src emacs-lisp
  (global-set-key (kbd "H-a g") 'org-agenda)
#+end_src

* Projectile

#+begin_src emacs-lisp
  (use-package projectile :ensure t)
#+end_src

** Projectile-sensitive commands

*** Find file
#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/visit-or-projectile-visit (&optional a b)
    (interactive)
    (if (projectile-project-p)
        (call-interactively #'counsel-projectile-find-file)
      (call-interactively #'counsel-find-file)))
#+end_src

*** ag

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/ag-or-projectile-ag (&optional a b)
    (interactive)
    (if (projectile-project-p)
        (call-interactively #'projectile-ag)
      (call-interactively #'ag)))
#+end_src

* Searching

** Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-g") 'projectile-ripgrep)
  (global-set-key (kbd "H-G") 'ag)
#+end_src

** Silversearcher ag

#+begin_src emacs-lisp
  (use-package ag :ensure t)
#+end_src

*** Reuse buffer

#+begin_src emacs-lisp
  (setq ag-reuse-buffers t)
#+end_src


** ripgrep

#+begin_src emacs-lisp
  (use-package ripgrep :ensure t)
#+end_src

* Wgrep

#+begin_src emacs-lisp
  (use-package wgrep :ensure t)
  (use-package wgrep-ag :ensure t)
  (require 'wgrep)
  (require 'wgrep-ag)
#+end_src

** Auto save wgrep buffer

#+begin_src emacs-lisp
  (setq wgrep-auto-save-buffer t)
#+end_src

* Magit

#+begin_src emacs-lisp
  (use-package magit :ensure t)
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c g") 'magit-status)
  (global-set-key (kbd "C-c C-g") 'magit-status)
#+end_src

** Full screen magit-status and unfold all sections

#+begin_src emacs-lisp
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows)
    (magit-section-show-level-2-all))
#+end_src

** Restore windows after quitting magit

#+begin_src emacs-lisp
  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
#+end_src

** Some custom variables

#+begin_src emacs-lisp
  (custom-set-variables
   '(git-commit-fill-column 1000)
   '(git-commit-finish-query-functions nil)
   '(git-commit-summary-max-length 1000))
#+end_src

* Git

** Timemachine

#+begin_src emacs-lisp
  (use-package git-timemachine :ensure t)
#+end_src

* Dired

** Open files with "a"

#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+end_src

** Auto refresh dired, but be quiet about it

#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
#+end_src

** Jump to top and bottom

#+begin_src emacs-lisp
  (defun dired-back-to-top ()
    (interactive)
    (beginning-of-buffer)
    (dired-next-line 1)
    (dired-next-line 1)
    (dired-next-line 1))

  (define-key dired-mode-map
              (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)

  (defun dired-jump-to-bottom ()
    (interactive)
    (end-of-buffer)
    (dired-next-line -1))

  (define-key dired-mode-map
              (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)
#+end_src

** File ordering

#+begin_src emacs-lisp
  (setq dired-listing-switches "-aBhl  --group-directories-first")
#+end_src

** Dired omit

#+begin_src emacs-lisp
  (setq-default dired-omit-files-p nil) ; Buffer-local variable

  (setq dired-omit-files "^\\.?#\\|^\\.$\\|^\\.[^\\.]")
  ;; (setq dired-omit-mode t) ; Turn on Omit mode.
  (setq dired-omit-verbose nil) ; Turn off Omit mode messages.
#+end_src

** dired-x

#+begin_src emacs-lisp
  (require 'dired-x)
#+end_src

** Hide details

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode t)))
#+end_src

* Buffers

** Kill other buffers

Kill all buffers except for the current one

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/kill-other-buffers ()
    "Kill all buffers but the current one.
  Don't mess with special buffers."
    (interactive)
    (dolist (buffer (buffer-list))
      (unless (or (eql buffer (current-buffer)) (not (buffer-file-name buffer)))
        (progn
          (kill-buffer buffer)
          ))
      (delete-other-windows)))
#+end_src

Bind it to =C-c k=

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c k") 'fdx/kill-other-buffers)
#+end_src

** Switch to scratch buffer

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-w")
                  (lambda ()
                    (interactive)
                    (switch-to-buffer "*scratch*")))
#+end_src

** Reuse buffers

All buffers, try to reuse windows across all frames

[[https://emacs.stackexchange.com/questions/327/how-can-i-block-a-frame-from-being-split][Source]]

#+begin_src emacs-lisp
  (defun fdx/reuse-buffers ()
    (interactive)
    (add-to-list 'display-buffer-alist
                 '(".*". (display-buffer-reuse-window .
                                                      ((reusable-frames . t))))))
#+end_src

* Directories

When finding a file, if the parent directory doesn't exist, create it first

#+begin_src emacs-lisp
  ;; Make directories on the fly
  (defun make-parent-directory ()
    "Make sure the directory of `buffer-file-name' exists."
    (make-directory (file-name-directory buffer-file-name) t))

  (add-hook 'find-file-not-found-functions #'make-parent-directory)
#+end_src

* Windows

** Global keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-<left>")  'windmove-left)
  (global-set-key (kbd "H-<right>") 'windmove-right)
  (global-set-key (kbd "H-<up>")    'windmove-up)
  (global-set-key (kbd "H-<down>")  'windmove-down)

  (global-set-key (kbd "H-w") 'balance-windows)
#+end_src

** Winner mode

Navigate window configuration history

#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

** Centered cursor mode

#+begin_src emacs-lisp
  (use-package centered-cursor-mode :ensure t)
#+end_src

** Split vertically by default

#+begin_src emacs-lisp
  (setq split-width-threshold 0)
  (setq split-height-threshold nil)
#+end_src

* Ruby

** Local keybindings

#+begin_src emacs-lisp
  (eval-after-load "ruby-mode"
    '(progn
       (define-key ruby-mode-map (kbd "C-c C-c") 'fdx/seeing-is-believing-run-as-xmpfilter-and-reload-mode)
       (define-key ruby-mode-map (kbd "H-;") 'fdx/comment-dwim)
       (define-key ruby-mode-map (kbd "C-;") 'fdx/comment-dwim)
       (define-key ruby-mode-map (kbd "H-=") 'fdx/reindent-buffer)
       (define-key ruby-mode-map (kbd "C-c C-c") 'xmp)
       (define-key ruby-mode-map (kbd "C-c c") 'xmp)
       (define-key ruby-mode-map (kbd "C-;") 'comment-dwim)
       ))
#+end_src

** XMP

#+begin_src emacs-lisp
  (load
   (expand-file-name "~/.emacs.d/fdx/vendor/rcodetools.el")
   t)

  (setq xmpfilter-command-name
        "ruby -S seeing_is_believing --xmpfilter-style")
  ;; (setq xmpfilter-command-name
  ;;       "ruby -S seeing_is_believing -r ~/lib/xmp_base --xmpfilter-style")
#+end_src

** RVM

#+begin_src emacs-lisp
  (use-package rvm
    :ensure t
    :config
    (rvm-use-default))
#+end_src

** Rspec

#+begin_src emacs-lisp
  (use-package rspec-mode
    :bind (
           ("H-r r"   . rspec-rerun)
           ("H-r t"   . rspec-toggle-spec-and-target)
           ("H-r v"   . rspec-verify)
           ("H-r a"   . rspec-verify-all)
           ("H-r H-a" . rspec-verify-all)
           ("H-r s"   . rspec-verify-single)
           ("H-r f"   . rspec-run-last-failed)
           )
    :ensure t)
#+end_src

** Ruby Runner Mode

#+begin_src emacs-lisp
  (load (expand-file-name "~/.emacs.d/fdx/vendor/ruby-runner-mode/ruby-runner-mode.el") t)
#+end_src

*** Functions and Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-i i") 'rr/rerun)

  (which-key-add-key-based-replacements "H-i r" "RSpec")
  (rr/global-set-key "H-i r a" "bundle exec rspec")
  ;; (rr/global-set-key-current-file "H-i r v" "rspec")
  ;; (rr/global-set-key-current-file "H-6" "rspec")

  (which-key-add-key-based-replacements "H-i u" "Rubocop")
  (rr/global-set-key "H-i u a" "bundle exec rubocop")
  (rr/global-set-key "H-i u A" "bundle exec rubocop --autocorrect && bundle exec rubocop")
  (rr/global-set-key "H-i u T" "bundle exec rubocop --regenerate-todo")

  (which-key-add-key-based-replacements "H-i b" "Bundle")
  (rr/global-set-key-multiple "H-i b b" '("bundle install" "pessimize -c patch --no-backup" "bundle install"))
  (rr/global-set-key-multiple "H-i b B" '("bundle update" "pessimize -c patch --no-backup" "bundle install"))

  ;; (rr/global-set-key "H-i r" "ruby" (buffer-file-name)) <- this doesn't work
#+end_src

** Parens

#+begin_src emacs-lisp
  (use-package ruby-electric :ensure t)

  (require 'ruby-electric)
  (electric-pair-mode t)
#+end_src

** Bundle

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/bundle ()
    "Run Pessimize."
    (interactive)
    (compile "bundle install"))

  ;;;###autoload
  (defun fdx/bundle-update ()
    "Run Pessimize."
    (interactive)
    (compile "bundle update"))

  ;;;###autoload
  (defun fdx/pessimize ()
    "Run Pessimize."
    (interactive)
    (compile "pessimize -c patch --no-backup"))

  ;;;###autoload
  (defun fdx/bundle-pessimize ()
    "Run bundel install and pessimize."
    (interactive)
    (compile "bundle install && pessimize -c patch --no-backup"))

  ;;;###autoload
  (defun fdx/bundle-update-pessimize ()
    "Run bundle update and pessimize."
    (interactive)
    (compile "bundle update && pessimize -c patch --no-backup"))

  ;;;###autoload
  (defun fdx/rspec-init ()
    "Run bundle update and pessimize."
    (interactive)
    (compile "bundle exec rspec --init"))
#+end_src

** Inline Ruby namespace

Convert a nested set of classes and modules to one line with the namespace joined by "::"

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/inline-ruby-namespace (beg end)
    (interactive "r")

    (let ((selection (buffer-substring-no-properties beg end)))
      (let
          ((inlined (string-join (split-string (s-replace "\n" "" selection) "\s*\\(?:module\\|class\\)\s+") "::")))
        ;;(message selection)
        (message inlined)
        (delete-region beg end)
        (insert inlined)

        )

      )
    )
#+end_src

** Refactorings

#+begin_src emacs-lisp
  (use-package ruby-refactor :ensure t)
#+end_src

** Don't use flymake

#+begin_src emacs-lisp
  (setq ruby-flymake-use-rubocop-if-available nil)
#+end_src

** Clean whitespace

#+begin_src ruby
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

* Counsel

#+begin_src emacs-lisp
  (use-package counsel :ensure t)
#+end_src

** Remove caret

#+begin_src emacs-lisp
  (setq ivy-initial-inputs-alist nil)
#+end_src

** Flex

#+begin_src emacs-lisp
  (setq ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                (t . ivy--regex-fuzzy)))
#+end_src

** Counsel-projectile

#+begin_src emacs-lisp
  (use-package counsel-projectile :ensure t)
#+end_src

* Swiper

#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind (
           ("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           )
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))
#+end_src

* Ivy

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (require 'ivy))

  (use-package flx
    :ensure t
    :config
    (require 'flx))

  (setq ivy-use-virtual-buffers t)

  ;; intentional space before end of string
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-initial-inputs-alist nil)

  (setq ivy-re-builders-alist
        '((swiper . ivy--regex-plus)
          (t      . ivy--regex-fuzzy)))

  ;; Use C-j for immediate termination with current value
  (define-key ivy-minibuffer-map (kbd "C-j") #'ivy-immediate-done)
  ;; Use RET for continuing completion for that directory
  (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)

  (ivy-mode 1)
#+end_src

* Snippets

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (progn
      (setq yas-snippet-dirs
            (list (expand-file-name "~/.emacs.d/fdx/snippets")))
      (yas-global-mode 1)
      ))

  (require 'yasnippet)
#+end_src

** Recompile snippets

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/recompile-snippets ()
    (interactive)
    (shell-command
     (concat "rm -rf "
             user-emacs-directory
             "fdx/snippets/**/.yas-compiled-snippets.el*"))
    (yas/recompile-all)
    (yas/reload-all))
#+end_src

** Some keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "S-<f7>") 'fdx/recompile-snippets)
  (global-set-key (kbd "<backtab>") 'yas-expand-from-trigger-key)
  (global-set-key (kbd "C-<tab>") 'yas-insert-snippet)
#+end_src

* Undo tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+end_src

*** Don't save undo-tree history

#+begin_src emacs-lisp
  (setq undo-tree-auto-save-history nil)
#+end_src

* Bookmarks
#+begin_src emacs-lisp
  (global-set-key (kbd "H-0") 'bookmark-jump)
  (global-set-key (kbd "H-)") 'bookmark-set)
#+end_src

* web-mode

#+begin_src emacs-lisp
  (use-package web-mode :ensure t)
#+end_src

* Emmet mode

#+begin_src emacs-lisp
  (use-package emmet-mode :ensure t)
#+end_src

* Slim

#+begin_src emacs-lisp
  (use-package slim-mode
    :bind (
           ("H-h" . emmet-expand-yas)
           ("H-=" . fdx/reindent-buffer)
           )
    :ensure t)
#+end_src

* Join line

#+begin_src emacs-lisp
  (global-set-key (kbd "H-j") (lambda ()
                                (interactive)
                                (join-line -1)))
#+end_src

* Very large files

#+begin_src emacs-lisp
  (use-package vlf :ensure t)
#+end_src

* ASCII Doc

#+begin_src emacs-lisp
  (use-package adoc-mode :ensure t)
  (add-hook 'adoc-mode-hook (lambda()
                              (buffer-face-mode -1)
                              (global-set-key (kbd "C-c t t") 'fdx/populate-adoc-shots)))
#+end_src

** Populate ASCIIdoc shots

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/populate-adoc-shots (ARG)
    "Populate {{{shot(n)}}} macros on current buffer"
    (interactive "p")
    (save-excursion
      (beginning-of-buffer)
      (kmacro-set-counter 1)
      (while (search-forward "shot::[" nil t)
        (let ((start (point)))
          (search-forward-regexp ",\\|]" nil nil)
          (left-char)
          (delete-region start (point)))
        (kmacro-insert-counter ARG))
      (message "Done populating shot macros.")))
#+end_src

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/insert-and-populate-adoc-shots ()
    "Insert {{{shot()}}} and repopulate shots on buffer"
    (interactive)
    (insert "shot::[]")
    (fdx/populate-adoc-shots t))
#+end_src

* Markdown

** Populate markdown shots

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/populate-md-shots (ARG)
    "Populate <!-- shot(n) --> macros on current buffer"
    (interactive "p")
    (save-excursion
      (beginning-of-buffer)
      (kmacro-set-counter 1)
      (while (search-forward "<!-- shot(" nil t)
        (let ((start (point)))
          (search-forward-regexp ",\\|)" nil nil)
          (left-char)
          (delete-region start (point)))
        (kmacro-insert-counter ARG))
      (message "Done populating shot macros.")))
#+end_src

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/insert-and-populate-md-shots ()
    "Insert {{{shot()}}} and repopulate shots on buffer"
    (interactive)
    (insert "<!-- shot() -->")
    (fdx/populate-md-shots t))
#+end_src

** Populate HanamiMastery shots

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/populate-hm-shots (ARG)
    "Populate [📽 nw] macros on current buffer"
    (interactive "p")
    (save-excursion
      (beginning-of-buffer)
      (kmacro-set-counter 1)
      (while (search-forward "[📽 " nil t)
        (let ((start (point)))
          (search-forward-regexp ",\\|]" nil nil)
          (left-char)
          (delete-region start (point)))
        (kmacro-insert-counter ARG))
      (message "Done populating shots.")))
#+end_src

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/insert-and-populate-hm-shots ()
    "Insert [📽 ] and repopulate shots on buffer"
    (interactive)
    (insert "[📽 ]")
    (fdx/populate-hm-shots t))
#+end_src

* Columns

** Show column numbers

#+begin_src emacs-lisp
  (column-number-mode)
#+end_src

* Font size customizations

#+begin_src emacs-lisp
  (setq fdx/font-size-increment 5)

  ;;;###autoload
  (defun fdx/decrease-font ()
    "Decrease the font for all buffers"
    (interactive)
    (let ((old-face-attribute (face-attribute 'default :height)))
      (set-face-attribute 'default nil :height (+ old-face-attribute fdx/font-size-increment))))

  ;;;###autoload
  (defun fdx/increase-font ()
    "Increase the font for all buffers"
    (interactive)
    (let ((old-face-attribute (face-attribute 'default :height)))
      (set-face-attribute 'default nil :height (- old-face-attribute fdx/font-size-increment))))
#+end_src

** Key Bindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-]") 'fdx/increase-font)
  (global-set-key (kbd "H-[") 'fdx/decrease-font)
#+end_src

* No op

#+begin_src emacs-lisp
  (defun no-op () (interactive))
#+end_src

* Multiple cursors

#+begin_src emacs-lisp
  (use-package multiple-cursors :ensure t)

  (require 'multiple-cursors)
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-a") 'mc/edit-lines)
  (global-set-key (kbd "C-M-<return>") 'mc/edit-lines)

  (global-set-key (kbd "C-c a") 'mc/mark-all-like-this)

  (global-set-key (kbd "H-.") 'mc/mark-next-like-this)
  (global-set-key (kbd "H-,") 'mc/mark-previous-like-this)
  (global-set-key (kbd "H->") 'mc/skip-to-next-like-this)

  (global-set-key (kbd "H-p") 'mc/insert-numbers)
#+end_src

* Expand region

#+begin_src emacs-lisp
  (use-package expand-region :ensure t)

  (require 'expand-region)

  (setq expand-region-fast-keys-enabled nil)
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-e") 'er/expand-region)
  (global-set-key (kbd "C-c e") 'er/expand-region)
#+end_src

* Reload browser

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/reload-browser (&optional by)
    "Reload web browser"
    (interactive)
    (save-some-buffers)
    (save-window-excursion (async-shell-command "~/bin/reload-browser"))
    ;; (kill-buffer "*Async Shell Command*")
    )

  ;;;###autoload
  (defun fdx/send-up-enter-to-current-window (&optional list)
    "Reload web browser"
    (interactive)
    (save-some-buffers)
    (save-window-excursion (async-shell-command "~/bin/send_to_current_window \"<Up>\" \"<Return>\""))
    ;; (kill-buffer "*Async Shell Command*")
    )

  ;;;###autoload
  (defun fdx/set-current-window (&optional by)
    "Reload web browser"
    (interactive)
    (save-some-buffers)
    (save-window-excursion (async-shell-command "~/bin/set_current_window"))
    ;; (kill-buffer "*Async Shell Command*")
    )

  ;;;###autoload
  (defun fdx/save-and-reload-browser (&optional by)
    "Save current buffer and reload web browser"
    (interactive)
    (save-buffer)
    (fdx/reload-browser)
    )

  ;;;###autoload
  (defun fdx/save-and-reload-browser-with-delay (&optional by)
    "Save current buffer and reload web browser"
    (interactive)
    (save-buffer)
    (sleep-for 0.3)
    (fdx/reload-browser)
    )

  ;;;###autoload
  (defun fdx/save-recompile-and-reload-browser-with-delay (&optional by)
    "Save current buffer and reload web browser"
    (interactive)
    (save-buffer)
    (recompile)
    (sleep-for 2.5)
    (fdx/reload-browser)
    )
#+end_src

* Toggle Window Split

Toggle window splits between vertical and horizontal splits

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
#+end_src

** Keybinding

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x /") 'fdx/toggle-window-split)
#+end_src

* Countdown

#+begin_src emacs-lisp
  (use-package countdown :ensure t)
#+end_src

* Compilation

** Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-m") 'recompile)
  (global-set-key (kbd "H-b") 'compile)
#+end_src

** Compile (run) current file

#+begin_src emacs-lisp
  (defun fdx/run-current-file ()
    (interactive)
    (save-buffer)
    (compile (buffer-file-name)))
#+end_src

** Compile (run) current Ruby file

#+begin_src emacs-lisp
  (defun fdx/run-current-ruby-file ()
    (interactive)
    (save-buffer)
    (compile (concat "ruby " (buffer-file-name))))
#+end_src

* Copy current file name to clipboard

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/file-name-to-clipboard ()
    "Copy current file name to clipboard"
    (interactive)
    (if (buffer-file-name)
        (progn
          (kill-new (buffer-file-name))
          (message (buffer-file-name))
          )
      (message "Current buffer is not visiting a saved file")
      )
    )
#+end_src

* Docker

#+begin_src emacs-lisp
  (use-package dockerfile-mode :ensure t)
#+end_src

* YAML

#+begin_src emacs-lisp
  (use-package yaml-mode :ensure t)
#+end_src

* Cucumber School

** Run rake tasks

#+begin_src emacs-lisp
  (defun fdx/cucumber/run-rake-task(task)
    (shell-command
     (concat "cd /data/cucumber/content/ && bundle exec rake " task)
     )
    )

  (defun fdx/cucumber/run-code-rake-task()
    (interactive)
    (fdx/cucumber/run-rake-task "code")
    )

  (defun fdx/cucumber/run-html-rake-task()
    (interactive)
    (fdx/cucumber/run-rake-task "html")
    )

  (defun fdx/cucumber/run-html-rake-task-and-reload-browser()
    (interactive)
    (fdx/populate-adoc-shots 1)
    (save-buffer)
    (fdx/cucumber/run-rake-task "html")
                                          ; (sleep-for 0.5)
    (fdx/reload-browser)
    )
#+end_src

** ASCII Doc

#+begin_src emacs-lisp
  (use-package adoc-mode :ensure t)
  (add-hook 'adoc-mode-hook (lambda()
                              (buffer-face-mode t)
                              (global-set-key (kbd "C-c t t") 'fdx/populate-adoc-shots)))
#+end_src

** Copy include line from file

#+begin_src emacs-lisp
  (defun fdx/adoc-copy-include-line-from-file (p m)
    (interactive "r")

    (let* (
           (lines-arg (fdx/adoc-get-lines-arg p m))
           (file (fdx/adoc-strip-src-file-name (buffer-file-name)))
           )

      (kill-new (concat "include::" file "[" lines-arg "]"))
      (message (concat "include::" file "[" lines-arg "]"))
      )
    )

  (defun fdx/adoc-get-lines-arg (p m)
    (if (region-active-p)
        (if (eq p m)
            (format "lines=%s" (line-number-at-pos p) (line-number-at-pos m))
          (format "lines=%s..%s" (line-number-at-pos p) (line-number-at-pos m)))
      )
    )

  (defun fdx/adoc-strip-src-file-name (file-name)
    (replace-regexp-in-string "\\(\.\+/[0-9][0-9]/\\)" "../" (buffer-file-name) nil nil 1)
    )
#+end_src

* Editing tweaks

** Delete selection

#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

** Lines

*** Line numbers

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 0)
  (display-line-numbers-mode 0)
#+end_src

*** Highlight current line

#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src

*** Duplicate line

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank))
#+end_src

*** Move lines around

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  ;;;###autoload
  (defun fdx/move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))
#+end_src

*** Open lines above and below

Commands for opening a new line above and below the current line

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/open-line-below ()
    "Open an empty line above the current one and move."
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent))

  ;;;###autoload
  (defun fdx/open-line-above ()
    "Open an empty line above the current one and move."
    (interactive)
    (move-beginning-of-line nil)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))
#+end_src

Bind them

#+begin_src emacs-lisp
  (global-set-key (kbd "C-<return>") 'fdx/open-line-below)
  (global-set-key (kbd "C-S-<return>") 'fdx/open-line-above)
#+end_src

** Strings

*** Replace tabs with commas

#+begin_src emacs-lisp
  (defun fdx/paste-replacing-tabs-with-commas ()
    (interactive)
    (insert (replace-regexp-in-string "\t" "," (car kill-ring)))
    )
#+end_src

** Dead characters

#+begin_src emacs-lisp
  (require 'iso-transl)
#+end_src

* Files tweaks

** Save place of cursor between sessions

#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src

** Backup files

Write backup files to own directory

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (expand-file-name "~/.emacs.d/backups")))))
#+end_src

Make backups of files, even when they're in version control

#+begin_src emacs-lisp
  (setq vc-make-backup-files t)
  (setq create-lockfiles nil)
#+end_src

** Rename current file

#+begin_src emacs-lisp
  ;; source: http://steve.yegge.googlepages.com/my-dot-emacs-file
  (defun fdx/rename-current-file (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive (list (read-string "sNew name: " (file-name-nondirectory (buffer-file-name)))))
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil))))))
#+end_src

** Delete current file

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (progn
            (delete-file filename)
            (message "Deleted file %s" filename)
            (kill-buffer))))))
#+end_src

** Touch current file

#+begin_src emacs-lisp
  (defun fdx/touch-current-file ()
    "updates mtime on the file for the current buffer"
    (interactive)
    (shell-command (concat "touch " (shell-quote-argument (buffer-file-name))))
    (clear-visited-file-modtime))
#+end_src

** Change mode to current file

#+begin_src emacs-lisp
  (defun fdx/chmod-current-file ()
    "updates mtime on the file for the current buffer"
    (interactive)
    (chmod (buffer-file-name) (read-file-modes)))
#+end_src

* Company

#+begin_src emacs-lisp
  (use-package company :ensure t)
#+end_src

* LSP

#+begin_src emacs-lisp
  (use-package lsp-mode :ensure t)
#+end_src

** Languages

*** Ruby

#+begin_src emacs-lisp
  (add-hook 'ruby-mode-hook #'lsp)
  ;; (add-hook 'ruby-mode-hook #'lsp-deferred)
#+end_src

* Tabnine

#+begin_src emacs-lisp
  (use-package company-tabnine :ensure t)
#+end_src

** Add to company

#+begin_src emacs-lisp
  (add-to-list 'company-backends #'company-tabnine)
#+end_src

* Ruby Framework generator

** Just Ruby

#+begin_src emacs-lisp
  (defun fdx/generate_ruby_framework_project (project-name)
    "Reload web browser"
    (interactive "sProject name: ")
    (message (concat "Generating project " project-name))
    (save-some-buffers)
    (save-window-excursion (async-shell-command (concat "~/bin/ruby_framework " project-name)))
    )
#+end_src

** Web with Roda

#+begin_src emacs-lisp
  (defun fdx/generate_ruby_framework_web_project (project-name)
    "Reload web browser"
    (interactive "sProject name: ")
    (message (concat "Generating project " project-name))
    (save-some-buffers)
    (save-window-excursion (async-shell-command (concat "~/bin/ruby_framework_web " project-name)))
    )
#+end_src

* Directory local variables

[[https://endlessparentheses.com/a-quick-guide-to-directory-local-variables.html#:~:text=Emacs%20already%20has%20that%20built,major%2Dmode%20or%20by%20subdirectory.][Source]]

* TypeScript

#+begin_src emacs-lisp
  (use-package typescript-mode :ensure t)
#+end_src

* Start Server

#+begin_src emacs-lisp
  (server-start)
#+end_src

* Folding

#+begin_src emacs-lisp
  (use-package yafolding :ensure t)

  (global-set-key (kbd "H-c") 'yafolding-toggle-element)
  (global-set-key (kbd "H-C") 'yafolding-toggle-all)
#+end_src

* Colors in compilation buffer

** Display ANSI colors on current buffer

#+begin_src emacs-lisp
  (require 'ansi-color)
  (defun fdx/display-ansi-colors ()
    (interactive)
    (ansi-color-apply-on-region (point-min) (point-max)))
#+end_src

** Display ANSI colors on compilation buffer

#+begin_src emacs-lisp
  (require 'ansi-color)
  (defun endless/colorize-compilation ()
    "Colorize from 'compilation-filter-start' to 'point'."
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region
       compilation-filter-start (point))))

  (add-hook 'compilation-filter-hook
            'endless/colorize-compilation)
#+end_src

** Fix ANSII colors

#+begin_src emacs-lisp
  (use-package xterm-color :ensure t)
  (require 'xterm-color)
  (setq compilation-environment '("TERM=xterm-256color"))
  (defun my/advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))
  (advice-add 'compilation-filter :around #'my/advice-compilation-filter)
#+end_src

** Set TERM environment variable to show colors on terminal

#+begin_src emacs-lisp
  (setenv "TERM" "256colors")
#+end_src

* Org livemarkup

#+begin_src emacs-lisp
  (load
   (expand-file-name "~/.emacs.d/fdx/vendor/livemarkup.el")
   t)
#+end_src

#+begin_src emacs-lisp
  (setq livemarkup-output-directory "/sandbox"
        livemarkup-close-buffer-delete-temp-files t
        livemarkup-refresh-interval 0.1
        livemarkup-browser-open-function t)
#+end_src

* Flet

#+begin_src emacs-lisp
  (use-package noflet :ensure t :defer t)
#+end_src

* File extensions

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org\\'"      . org-mode))
  (add-to-list 'auto-mode-alist '("\\.rb\\'"       . ruby-mode))
  (add-to-list 'auto-mode-alist '("Rakefile\\'"    . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.rake\\'"     . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.ru\\'"       . ruby-mode))
  (add-to-list 'auto-mode-alist '("Gemfile\\'"     . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.gemspec\\'"  . ruby-mode))
  (add-to-list 'auto-mode-alist '("Guardfile\\'"   . ruby-mode))
  (add-to-list 'auto-mode-alist '("Jenkinsfile\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.rabl\\'"     . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.env"         . ruby-mode))

  (add-to-list 'auto-mode-alist '("\\.html\\'"     . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'"      . web-mode))

  (add-to-list 'auto-mode-alist (cons "\\.adoc\\'" 'adoc-mode))

  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src


